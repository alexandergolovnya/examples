package com.example;

import com.example.model.Purchase;
import io.confluent.kafka.serializers.KafkaAvroSerializer;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;
import java.util.UUID;

import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;
import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;

/**
 * The {@link TestPurchaseProducer} class is responsible for creating and sending Purchase events to a Kafka topic.
 * Each Purchase event corresponds to a {@link com.example.model.Purchase} object, which is structured according to an Avro schema.
 *
 * <p>The Avro schema for Purchase events is represented in the file: {@code src/main/avro/Purchase.avsc}.
 * The corresponding Java class is generated by the Avro Maven plugin.</p>
 */
@Slf4j
public class TestPurchaseProducer {
    private final Producer<String, Purchase> producer;
    private final String topic;

    public static void main(String[] args) {
        var testPurchaseProducer = new TestPurchaseProducer(ApplicationProperties.PURCHASE_TOPIC);
        testPurchaseProducer.initTestPurchases();
        System.exit(0);
    }

    /**
     * Constructs a new {@link TestPurchaseProducer} that will produce to the specified Kafka topic.
     *
     * @param topic the Kafka topic to which Purchase events will be produced
     */
    public TestPurchaseProducer(String topic) {
        // Set the Kafka properties for the Purchase producer
        Properties properties = ApplicationProperties.getKafkaProperties();
        properties.put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        properties.put(VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class);

        this.topic = topic;
        this.producer = new KafkaProducer<>(properties);
    }

    /**
     * This method will generate a random purchase event and send it to the Kafka topic.
     * The key of the event will be the purchaseId.
     * The value of the event will be a Purchase object.
     */
    public void initTestPurchases() {
        try {
            var purchaseId = UUID.randomUUID().toString();

            var purchase = Purchase.newBuilder()
                    .setPurchaseId(purchaseId)
                    .setPurchaseTimestamp(System.currentTimeMillis())
                    .setUserId(UUID.randomUUID().toString())
                    .setProductId(UUID.randomUUID().toString())
                    .setProductName("Test Product 1")
                    .setProductCategory("Test Category 1")
                    .setProductPrice(120.00)
                    .setQuantity(1)
                    .build();

            log.info("Submitting the new Purchase event: {}", purchase);
            sendProducerRecord(purchaseId, purchase);

        } finally {
            producer.close();
        }
    }

    /**
     * This method will send a purchase event to the Kafka topic.
     *
     * @param key      The key of the purchase event
     * @param purchase The value of the purchase event
     */
    public void sendProducerRecord(String key, Purchase purchase) {
        var producerRecord = new ProducerRecord<>(topic, key, purchase);

        this.producer.send(producerRecord, (metadata, exception) -> {
            if (exception == null) {
                log.info("Purchase event sent successfully: {}. Topic: {}, Partition: {}, Offset: {}",
                        purchase, metadata.topic(), metadata.partition(), metadata.offset());
            } else {
                log.error("Failed to send Purchase event: {}", exception.getMessage(), exception);
            }
        });
    }

    /**
     * This method will close the Kafka producer.
     */
    public void close() {
        this.producer.close();
    }
}

